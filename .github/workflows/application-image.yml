name: Application Image
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  Integration-Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4

      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
      
      - name: Configure MySQL
        env:
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_TEST_DATABASE: ${{ secrets.DB_TEST_DATABASE }}
        run: |
          sudo systemctl start mysql.service
          mysql -u root -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${DB_ROOT_PASSWORD}';"
          mysql -u root -p"${DB_ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS ${DB_TEST_DATABASE};"
          mysql -u root -p"${DB_ROOT_PASSWORD}" -e "CREATE USER IF NOT EXISTS '${DB_USERNAME}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
          mysql -u root -p"${DB_ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON ${DB_TEST_DATABASE}.* TO '${DB_USERNAME}'@'localhost';"

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Test
        env:
          PORT: ${{ secrets.PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_TEST_DATABASE: ${{ secrets.DB_TEST_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          ENVIRONMENT: ${{ secrets.TEST_ENV }}
        run: npm test

  Application-Image:
    runs-on: ubuntu-latest
    needs: Integration-Test

    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Authenticate GCP account for deployment
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{secrets.DEPLOY_SA_CREDENTIALS}}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest
      
      - name: Packer Init
        run: packer init packer/

      - name: Build Application Artifacts
        run: npm run build

      # - name: Packer Build
      #   env: 
      #     GCP_PACKER_CREDENTIALS: ${{ secrets.GCP_PACKER_CREDENTIALS }}
      #     LOG_FILE_PATH: ${{ secrets.LOG_FILE_PATH }}
      #   run: |
      #     packer build -var project_id=${{ secrets.PAK_VAR_PROJECT_ID }} \
      #     -var zone=${{ secrets.PAK_VAR_ZONE }} \
      #     -var source_image_family=${{ secrets.PAK_VAR_SOURCE_IMAGE_FAMILY }} \
      #     -var ssh_username=${{ secrets.PAK_VAR_SSH_USERNAME }} \
      #     -var image_family=${{ secrets.PAK_VAR_IMAGE_FAMILY }} \
      #     -var machine_type=${{ secrets.PAK_VAR_MACHINE_TYPE }} \
      #     -var disk_size=${{ secrets.PAK_VAR_DISK_SIZE }} \
      #     -var disk_type=${{ secrets.PAK_VAR_DISK_TYPE }} \
      #     -var network=${{ secrets.PAK_VAR_NETWORK }} \
      #     -var environment=${{ secrets.PAK_VAR_ENVIRONMENT }} \
      #     packer/ 2>&1 | tee packer-output.txt
        
      - name: Deploy
        env:
          DEPLOY_DB_USERNAME: ${{ secrets.DEPLOY_DB_USERNAME }}
          DEPLOY_DB_DATABASE: ${{ secrets.DEPLOY_DB_DATABASE }}
          DEPLOY_ENVIRONMENT: ${{ secrets.DEPLOY_ENVIRONMENT }}
          DEPLOY_LOG_FILE_PATH: ${{ secrets.DEPLOY_LOG_FILE_PATH }}
          DEPLOY_TOPIC_NAME: ${{ secrets.DEPLOY_TOPIC_NAME }}
          DEPLOY_EXPIRY_BUFFER: ${{ secrets.DEPLOY_EXPIRY_BUFFER }}
          DEPLOY_PROJECT_ID: ${{ secrets.DEPLOY_PROJECT_ID }}
          DEPLOY_INSTANCE_TEMPLATE_NAME_PREFIX: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_NAME_PREFIX }}
          DEPLOY_REGION: ${{ secrets.DEPLOY_REGION }}
          DEPLOY_INSTANCE_TEMPLATE_TAGS: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_TAGS }}
          DEPLOY_INSTANCE_TEMPLATE_MACHINE_TYPE: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_MACHINE_TYPE }}
          DEPLOY_INSTANCE_TEMPLATE_DISK_SIZE: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_DISK_SIZE }}
          DEPLOY_INSTANCE_TEMPLATE_DISK_TYPE: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_DISK_TYPE }}
          DEPLOY_INSTANCE_TEMPLATE_BOOT_DISK_AUTODELETE: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_BOOT_DISK_AUTODELETE }}
          DEPLOY_INSTANCE_TEMPLATE_SCOPES: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_SCOPES }}
          DEPLOY_INSTANCE_TEMPLATE_PROVISIONING_MODEL: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_PROVISIONING_MODEL }}
          DEPLOY_INSTANCE_TEMPLATE_ON_HOST_MAINTAINANCE: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_ON_HOST_MAINTAINANCE }}
          DEPLOY_INSTANCE_TEMPLATE_RESTART_ON_FAILURE: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_RESTART_ON_FAILURE }}
          DEPLOY_INSTANCE_TEMPLATE_NETWORK_NAME: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_NETWORK_NAME }}
          DEPLOY_INSTANCE_TEMPLATE_SUB_NETWORK_NAME: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_SUB_NETWORK_NAME }}
          DEPLOY_INSTANCE_TEMPLATE_SA_NAME: ${{ secrets.DEPLOY_INSTANCE_TEMPLATE_SA_NAME }}
          DEPLOY_INSTANCE_GROUP_MANAGER_NAME: ${{ secrets.DEPLOY_INSTANCE_GROUP_MANAGER_NAME }}
          DEPLOY_ROLLING_ACTION_MAX_UNAVAILABLE: ${{ secrets.DEPLOY_ROLLING_ACTION_MAX_UNAVAILABLE }}
          DEPLOY_ROLLING_ACTION_MINIMAL_ACTION: ${{ secrets.DEPLOY_ROLLING_ACTION_MINIMAL_ACTION }}
          DEPLOY_ROLLING_ACTION_REPLACEMENT_METHOD: ${{ secrets.DEPLOY_ROLLING_ACTION_REPLACEMENT_METHOD }}
          DEPLOY_ROLLING_ACTION_TYPE: ${{ secrets.DEPLOY_ROLLING_ACTION_TYPE }}
          DEPLOY_WAIT_UNTIL_TIMEOUT: ${{ secrets.DEPLOY_WAIT_UNTIL_TIMEOUT }}
          credentials_json: ${{secrets.DEPLOY_SA_CREDENTIALS}}
        run: |
          if ! image_name=$(tail -1 packer-output.txt | awk -F ' ' '{print $NF}'); then
            exit 1
          fi
          echo "Image name : $image_name"
          sh deploy.sh "$image_name"